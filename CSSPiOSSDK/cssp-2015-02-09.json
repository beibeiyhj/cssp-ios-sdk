{
    "metadata":{
        "apiVersion":"2015-02-09",
        "checksumFormat":"md5",
        "serviceAbbreviation":"CSSP",
        "serviceFullName":"Cloud Storage Service Platform",
        "timestampFormat":"rfc822",
        "protocol":"rest-xml"
    },
    "operations":{
        "AbortMultipartUpload":{
            "name":"AbortMultipartUpload",
            "http":{
                "method":"DELETE",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"AbortMultipartUploadRequest"},
            "errors":[
                      {
                      "shape":"NoSuchUpload",
                      "exception":true,
                      "documentation":"The specified multipart upload does not exist."
                      }
                      ],
            "documentation":"<p>Aborts a multipart upload.</p> <p>To verify that all parts have been removed, so you don't get charged for the part storage, you should call the List Parts operation and ensure the parts list is empty.</p>"
        },
        "CompleteMultipartUpload":{
            "name":"CompleteMultipartUpload",
            "http":{
                "method":"PUT",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"CompleteMultipartUploadRequest"},
            "output":{"shape":"CompleteMultipartUploadOutput"},
            "documentation":"Completes a multipart upload by assembling previously uploaded parts."
        },
        "CreateMultipartUpload":{
            "name":"CreateMultipartUpload",
            "http":{
                "method":"POST",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"CreateMultipartUploadRequest"},
            "output":{"shape":"CreateMultipartUploadOutput"},
            "documentation":"<p>Initiates a multipart upload and returns an upload ID.</p> <p><b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.</p>",
            "alias":"InitiateMultipartUpload"
        },
        "DeleteObject":{
            "name":"DeleteObject",
            "http":{
                "method":"DELETE",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"DeleteObjectRequest"},
            "output":{"shape":"DeleteObjectOutput"},
            "documentation":"Removes the null version (if there is one) of an object and inserts a delete marker, which becomes the latest version of the object. If there isn't a null version, Amazon S3 does not remove any objects."
        },
        "GetContainerAcl":{
            "name":"GetContainerAcl",
            "http":{
                "method":"GET",
                "requestUri":""
            },
            "input":{"shape":"GetContainerAclRequest"},
            "output":{"shape":"GetContainerAclOutput"},
            "documentation":"Gets the access control policy for the Container."
        },
        "GetObject":{
            "name":"GetObject",
            "http":{
                "method":"GET",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"GetObjectRequest"},
            "output":{"shape":"GetObjectOutput"},
            "errors":[
                      {
                      "shape":"NoSuchKey",
                      "exception":true,
                      "documentation":"The specified key does not exist."
                      }
                      ],
            "documentation":"Retrieves objects from Amazon S3."
        },
        "HeadContainer":{
            "name":"HeadContainer",
            "http":{
                "method":"HEAD",
                "requestUri":""
            },
            "output":{"shape":"HeadContainerOutput"},
            "errors":[
                      {
                      "shape":"NoSuchContainer",
                      "exception":true,
                      "documentation":"The specified Container does not exist."
                      }
                      ],
            "documentation":"This operation is useful to determine if a Container exists and you have permission to access it."
        },
        "HeadObject":{
            "name":"HeadObject",
            "http":{
                "method":"HEAD",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"HeadObjectRequest"},
            "output":{"shape":"HeadObjectOutput"},
            "errors":[
                      {
                      "shape":"NoSuchKey",
                      "exception":true,
                      "documentation":"The specified key does not exist."
                      }
                      ],
            "documentation":"The HEAD operation retrieves metadata from an object without returning the object itself. This operation is useful if you're only interested in an object's metadata. To use HEAD, you must have READ access to the object."
        },
        "ListMultipartUploads":{
            "name":"ListMultipartUploads",
            "http":{
                "method":"GET",
                "requestUri":""
            },
            "input":{"shape":"ListMultipartUploadsRequest"},
            "output":{"shape":"ListMultipartUploadsOutput"},
            "documentation":"This operation lists in-progress multipart uploads."
        },
        "ListObjects":{
            "name":"ListObjects",
            "http":{
                "method":"GET",
                "requestUri":""
            },
            "input":{"shape":"ListObjectsRequest"},
            "output":{"shape":"ListObjectsOutput"},
            "errors":[
                      {
                      "shape":"NoSuchContainer",
                      "exception":true,
                      "documentation":"The specified Container does not exist."
                      }
                      ],
            "documentation":"Returns some or all (up to 1000) of the objects in a Container. You can use the request parameters as selection criteria to return a subset of the objects in a Container.",
            "alias":"GetContainer"
        },
        "ListParts":{
            "name":"ListParts",
            "http":{
                "method":"GET",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"ListPartsRequest"},
            "output":{"shape":"ListPartsOutput"},
            "documentation":"Lists the parts that have been uploaded for a specific multipart upload."
        },
        "PutContainerAcl":{
            "name":"PutContainerAcl",
            "http":{
                "method":"PUT",
                "requestUri":"?acl"
            },
            "input":{"shape":"PutContainerAclRequest"},
            "documentation":"Sets the permissions on a Container using access control lists (ACL)."
        },
        "PutObject":{
            "name":"PutObject",
            "http":{
                "method":"PUT",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"PutObjectRequest"},
            "output":{"shape":"PutObjectOutput"},
            "documentation":"Adds an object to a Container."
        },
        "ReplicateObject":{
            "name":"ReplicateObject",
            "http":{
                "method":"PUT",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"ReplicateObjectRequest"},
            "output":{"shape":"ReplicateObjectOutput"},
            "documentation":"Replicate an object from another Container to current Container."
        },
        "UploadPart":{
            "name":"UploadPart",
            "http":{
                "method":"PUT",
                "requestUri":"/{Object+}"
            },
            "input":{"shape":"UploadPartRequest"},
            "output":{"shape":"UploadPartOutput"},
            "documentation":"<p>Uploads a part in a multipart upload.</p> <p><b>Note:</b> After you initiate multipart upload and upload one or more parts, you must either complete or abort multipart upload in order to stop getting charged for storage of the uploaded parts. Only after you either complete or abort multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts storage.</p>"
        }
    },
    "shapes":{
        "AbortMultipartUploadRequest":{
            "type":"structure",
            "required":[
                        "Object",
                        "UploadId"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                },
                "UploadId":{
                    "shape":"MultipartUploadId",
                    "location":"querystring",
                    "locationName":"uploadId"
                }
            }
        },
        "AcceptRanges":{"type":"string"},
        "Body":{"type":"blob"},
        "BytesUsed":{"type":"integer"},
        "CompleteMultipartUploadOutput":{
            "type":"structure",
            "members":{
                "ETag":{
                    "shape":"ETag",
                    "location":"header",
                    "documentation":"Entity tag of the object."
                }
            }
        },
        "CompleteMultipartUploadRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                },
                "Manifest":{
                    "shape":"Manifest",
                    "location":"header",
                    "locationName":"X-Object-Manifest"
                }
            }
        },
        "ContentDisposition":{"type":"string"},
        "ContentEncoding":{"type":"string"},
        "ContentLanguage":{"type":"string"},
        "ContentLength":{"type":"integer"},
        "ContentMD5":{"type":"string"},
        "ContentType":{"type":"string"},
        "CopySource":{"type":"string"},
        "CreateMultipartUploadOutput":{
            "type":"structure",
            "members":{
                "Container":{
                    "shape":"ContainerName",
                    "documentation":"Name of the Container to which the multipart upload was initiated.",
                    "locationName":"Container"
                },
                "Object":{
                    "shape":"ObjectKey",
                    "documentation":"Object key for which the multipart upload was initiated."
                },
                "UploadId":{
                    "shape":"MultipartUploadId",
                    "documentation":"ID for the initiated multipart upload."
                }
            }
        },
        "CreateMultipartUploadRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                }            }
        },
        "DeleteObjectOutput":{
            "type":"structure",
            "members":{
                "DeleteMarker":{
                    "shape":"DeleteMarker",
                    "location":"header",
                    "locationName":"x-object-delete-marker",
                    "documentation":"Specifies whether the versioned object that was permanently deleted was (true) or was not (false) a delete marker."
                }
            }
        },
        "DeleteObjectRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                }
            }
        },
        "Delimiter":{"type":"string"},
        "DisplayName":{"type":"string"},
        "ETag":{"type":"string"},
        "Expiration":{"type":"timestamp"},
        "ExpirationStatus":{
            "type":"string",
            "enum":[
                    "Enabled",
                    "Disabled"
                    ]
        },
        "Expires":{"type":"timestamp"},
        "GetContainerAclOutput":{
            "type":"structure",
            "members":{
                "Owner":{"shape":"Owner"},
                "Grants":{
                    "shape":"Grants",
                    "documentation":"A list of grants.",
                    "locationName":"AccessControlList"
                }
            }
        },
        "GetContainerAclRequest":{
            "type":"structure",
            "members":{
            }
        },
        "GetObjectOutput":{
            "type":"structure",
            "members":{
                "Body":{
                    "shape":"Body",
                    "streaming":true,
                    "documentation":"Object data."
                },
                "AcceptRanges":{
                    "shape":"AcceptRanges",
                    "location":"header",
                    "locationName":"accept-ranges"
                },
                "LastModified":{
                    "shape":"LastModified",
                    "location":"header",
                    "locationName":"Last-Modified",
                    "documentation":"Last modified date of the object"
                },
                "ContentLength":{
                    "shape":"ContentLength",
                    "location":"header",
                    "locationName":"Content-Length",
                    "documentation":"Size of the body in bytes."
                },
                "ETag":{
                    "shape":"ETag",
                    "location":"header",
                    "locationName":"ETag",
                    "documentation":"An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL"
                },
                "ContentEncoding":{
                    "shape":"ContentEncoding",
                    "location":"header",
                    "locationName":"Content-Encoding",
                    "documentation":"Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
                },
                "ContentType":{
                    "shape":"ContentType",
                    "location":"header",
                    "locationName":"Content-Type",
                    "documentation":"A standard MIME type describing the format of the object data."
                },
                "Expires":{
                    "shape":"Expires",
                    "location":"header",
                    "locationName":"X-Delete-At",
                    "documentation":"The date and time at which the object is no longer cacheable."
                },
                "Metadata":{
                    "shape":"Metadata",
                    "location":"headers",
                    "documentation":"A map of metadata to store with the object in S3.",
                    "locationName":"X-Object-Meta-"
                }
            },
            "payload":"Body"
        },
        "GetObjectRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                },
                "Range":{
                    "shape":"Range",
                    "location":"header",
                    "locationName":"Range",
                    "documentation":"Downloads the specified range bytes of an object. For more information about the HTTP Range header, go to http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35."
                }
            }
        },
        "GrantRead":{"type":"string"},
        
        "HeadContainerOutput":{
            "type":"structure",
            "members":{
                "ObjectCount":{
                    "shape":"ObjectCount",
                    "location":"header",
                    "locationName":"X-Container-Object-Count"
                },
                "BytesUsed":{
                    "shape":"BytesUsed",
                    "location":"header",
                    "locationName":"X-Container-Bytes-Used"
                },
                "GrantRead":{
                    "shape":"GrantRead",
                    "location":"header",
                    "locationName":"X-Container-Read",
                    "documentation":"The ACL that grants read access"
                },
                "Metadata":{
                    "shape":"Metadata",
                    "location":"headers",
                    "documentation":"A map of metadata to store with the object in S3.",
                    "locationName":"X-Container-Meta-"
                }
            }
        },
        
        "HeadContainerRequest":{
            "type":"structure",
            "members":{
            }
        },
        "HeadObjectOutput":{
            "type":"structure",
            "members":{
                "LastModified":{
                    "shape":"LastModified",
                    "location":"header",
                    "locationName":"Last-Modified",
                    "documentation":"Last modified date of the object"
                },
                "ContentLength":{
                    "shape":"ContentLength",
                    "location":"header",
                    "locationName":"Content-Length",
                    "documentation":"Size of the body in bytes."
                },
                "ETag":{
                    "shape":"ETag",
                    "location":"header",
                    "locationName":"ETag",
                    "documentation":"An ETag is an opaque identifier assigned by a web server to a specific version of a resource found at a URL"
                },
                "ContentDisposition":{
                    "shape":"ContentDisposition",
                    "location":"header",
                    "locationName":"Content-Disposition",
                    "documentation":"Specifies presentational information for the object."
                },
                "ContentEncoding":{
                    "shape":"ContentEncoding",
                    "location":"header",
                    "locationName":"Content-Encoding",
                    "documentation":"Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
                },
                "ContentType":{
                    "shape":"ContentType",
                    "location":"header",
                    "locationName":"Content-Type",
                    "documentation":"A standard MIME type describing the format of the object data."
                },
                "Expires":{
                    "shape":"Expires",
                    "location":"header",
                    "locationName":"X-Delete-At",
                    "documentation":"The date and time at which the object is no longer cacheable."
                },
                "Metadata":{
                    "shape":"Metadata",
                    "location":"headers",
                    "documentation":"A map of metadata to store with the object in S3.",
                    "locationName":"X-Object-Meta-"
                }
            }
        },
        "HeadObjectRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                }
            }
        },
        "HostName":{"type":"string"},
        "ID":{"type":"string"},
        "IfMatch":{"type":"string"},
        "IfModifiedSince":{"type":"timestamp"},
        "IfNoneMatch":{"type":"string"},
        "IfUnmodifiedSince":{"type":"timestamp"},
        "IsLatest":{"type":"boolean"},
        "IsTruncated":{"type":"boolean"},
        "KeyMarker":{"type":"string"},
        "KeyPrefixEquals":{"type":"string"},
        "LastModified":{"type":"timestamp"},
        "ListMultipartUploadsOutput":{
            "type":"structure",
            "members":{
                "object":{
                    "shape":"ObjectList"
                }
            }
        },
        "ListMultipartUploadsRequest":{
            "type":"structure",
            "members":{
                "MaxUploads":{
                    "shape":"MaxUploads",
                    "location":"querystring",
                    "locationName":"limit",
                    "documentation":"Sets the maximum number of multipart uploads, from 1 to 1,000, to return in the response body. 1,000 is the maximum number of uploads that can be returned in a response."
                },
                "Prefix":{
                    "shape":"Prefix",
                    "location":"querystring",
                    "locationName":"prefix",
                    "documentation":"Lists in-progress uploads only for those keys that begin with the specified prefix."
                }
            }
        },
        "ListObjectsOutput":{
            "type":"structure",
            "members":{
                "object":{"shape":"ObjectList"},
                "subdir":{"shape":"SubdirList"}
            }
        },
        "ListObjectsRequest":{
            "type":"structure",
            "members":{
                "Delimiter":{
                    "shape":"Delimiter",
                    "location":"querystring",
                    "locationName":"delimiter",
                    "documentation":"A delimiter is a character you use to group keys."
                },
                "EncodingType":{
                    "shape":"EncodingType",
                    "location":"querystring",
                    "locationName":"encoding-type"
                },
                "Marker":{
                    "shape":"Marker",
                    "location":"querystring",
                    "locationName":"marker",
                    "documentation":"Specifies the key to start with when listing objects in a Container."
                },
                "MaxKeys":{
                    "shape":"MaxKeys",
                    "location":"querystring",
                    "locationName":"limit",
                    "documentation":"Sets the maximum number of keys returned in the response. The response might contain fewer keys but will never contain more."
                },
                "Prefix":{
                    "shape":"Prefix",
                    "location":"querystring",
                    "locationName":"prefix",
                    "documentation":"Limits the response to keys that begin with the specified prefix."
                },
                "EndMarker":{
                    "shape":"Marker",
                    "location":"querystring",
                    "locationName":"end_marker",
                    "documentation":"Specifies the key to start with when listing objects in a Container."
                }
            }
        },
        "ListPartsOutput":{
            "type":"structure",
            "members":{
                "Key":{
                    "shape":"ObjectKey",
                    "documentation":"Object key for which the multipart upload was initiated."
                },
                "UploadId":{
                    "shape":"MultipartUploadId",
                    "documentation":"Upload ID identifying the multipart upload whose parts are being listed."
                },
                "PartNumberMarker":{
                    "shape":"PartNumberMarker",
                    "documentation":"Part number after which listing begins."
                },
                "NextPartNumberMarker":{
                    "shape":"NextPartNumberMarker",
                    "documentation":"When a list is truncated, this element specifies the last part in the list, as well as the value to use for the part-number-marker request parameter in a subsequent request."
                },
                "MaxParts":{
                    "shape":"MaxParts",
                    "documentation":"Maximum number of parts that were allowed in the response."
                },
                "IsTruncated":{
                    "shape":"IsTruncated",
                    "documentation":"Indicates whether the returned list of parts is truncated."
                },
                "Parts":{
                    "shape":"Parts",
                    "locationName":"Part"
                },
                "Initiator":{
                    "shape":"Initiator",
                    "documentation":"Identifies who initiated the multipart upload."
                }
            }
        },
        "ListPartsRequest":{
            "type":"structure",
            "required":[
                        "Object",
                        "UploadId"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                },
                "MaxParts":{
                    "shape":"MaxParts",
                    "location":"querystring",
                    "locationName":"max-parts",
                    "documentation":"Sets the maximum number of parts to return."
                },
                "PartNumberMarker":{
                    "shape":"PartNumberMarker",
                    "location":"querystring",
                    "locationName":"part-number-marker",
                    "documentation":"Specifies the part after which listing should begin. Only parts with higher part numbers will be listed."
                },
                "UploadId":{
                    "shape":"MultipartUploadId",
                    "location":"querystring",
                    "locationName":"uploadId",
                    "documentation":"Upload ID identifying the multipart upload whose parts are being listed."
                }
            }
        },
        "Location":{"type":"string"},
        "Manifest":{"type":"string"},
        "Marker":{"type":"string"},
        "MaxAgeSeconds":{"type":"integer"},
        "MaxKeys":{"type":"integer"},
        "MaxParts":{"type":"integer"},
        "MaxUploads":{"type":"integer"},
        "Message":{"type":"string"},
        "Metadata":{
            "type":"map",
            "key":{"shape":"MetadataKey"},
            "value":{"shape":"MetadataValue"}
        },
        "MetadataKey":{"type":"string"},
        "MetadataValue":{"type":"string"},
        "MultipartUploadId":{"type":"string"},
        "NoSuchContainer":{
            "type":"structure",
            "members":{
            },
            "exception":true,
            "documentation":"The specified Container does not exist."
        },
        "NoSuchKey":{
            "type":"structure",
            "members":{
            },
            "exception":true,
            "documentation":"The specified key does not exist."
        },
        "NoSuchUpload":{
            "type":"structure",
            "members":{
            },
            "exception":true,
            "documentation":"The specified multipart upload does not exist."
        },
        "NotificationId":{"type":"string"},
        "Object":{
            "type":"structure",
            "members":{
                "name":{"shape":"ObjectKey"},
                "last_modified":{"shape":"LastModified"},
                "hash":{"shape":"ETag"},
                "bytes":{"shape":"Size"},
                "content_type":{"shape":"ContentType"}
            }
        },
        "ObjectCount":{"type":"integer"},
        "ObjectKey":{"type":"string"},
        "ObjectList":{
            "type":"list",
            "member":{"shape":"Object"},
            "flattened":true
        },
        "Owner":{
            "type":"structure",
            "members":{
                "DisplayName":{"shape":"DisplayName"},
                "ID":{"shape":"ID"}
            }
        },
        "Part":{
            "type":"structure",
            "members":{
                "PartNumber":{
                    "shape":"PartNumber",
                    "documentation":"Part number identifying the part."
                },
                "LastModified":{
                    "shape":"LastModified",
                    "documentation":"Date and time at which the part was uploaded."
                },
                "ETag":{
                    "shape":"ETag",
                    "documentation":"Entity tag returned when the part was uploaded."
                },
                "Size":{
                    "shape":"Size",
                    "documentation":"Size of the uploaded part data."
                }
            }
        },
        "PartNumber":{"type":"integer"},
        "PartNumberMarker":{"type":"integer"},
        "Parts":{
            "type":"list",
            "member":{"shape":"Part"},
            "flattened":true
        },
        "Payer":{
            "type":"string",
            "enum":[
                    "Requester",
                    "ContainerOwner"
                    ]
        },
        "Policy":{"type":"string"},
        "Prefix":{"type":"string"},
        "Protocol":{
            "type":"string",
            "enum":[
                    "http",
                    "https"
                    ]
        },
        "PutContainerAclRequest":{
            "type":"structure",
            "members":{
                "GrantRead":{
                    "shape":"GrantRead",
                    "location":"header",
                    "locationName":"x-amz-grant-read",
                    "documentation":"Allows grantee to list the objects in the Container."
                }
            },
            "payload":"AccessControlPolicy"
        },
        "PutObjectOutput":{
            "type":"structure",
            "members":{
                "Expiration":{
                    "shape":"Expiration",
                    "location":"header",
                    "locationName":"x-object-expiration",
                    "documentation":"If the object expiration is configured, this will contain the expiration date (expiry-date) and rule ID (rule-id). The value of rule-id is URL encoded."
                },
                "ETag":{
                    "shape":"ETag",
                    "location":"header",
                    "locationName":"ETag",
                    "documentation":"Entity tag for the uploaded object."
                }
            }
        },
        "PutObjectRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Body":{
                    "shape":"Body",
                    "streaming":true,
                    "documentation":"Object data."
                },
                "CacheControl":{
                    "shape":"CacheControl",
                    "location":"header",
                    "locationName":"Cache-Control",
                    "documentation":"Specifies caching behavior along the request/reply chain."
                },
                "ContentDisposition":{
                    "shape":"ContentDisposition",
                    "location":"header",
                    "locationName":"Content-Disposition",
                    "documentation":"Specifies presentational information for the object."
                },
                "ContentEncoding":{
                    "shape":"ContentEncoding",
                    "location":"header",
                    "locationName":"Content-Encoding",
                    "documentation":"Specifies what content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field."
                },
                "ContentLength":{
                    "shape":"ContentLength",
                    "location":"header",
                    "locationName":"Content-Length",
                    "documentation":"Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically."
                },
                "ContentMD5":{
                    "shape":"ContentMD5",
                    "location":"header",
                    "locationName":"ETag"
                },
                "ContentType":{
                    "shape":"ContentType",
                    "location":"header",
                    "locationName":"Content-Type",
                    "documentation":"A standard MIME type describing the format of the object data."
                },
                "Expires":{
                    "shape":"Expires",
                    "location":"header",
                    "locationName":"X-Delete-At",
                    "documentation":"The date and time at which the object is no longer cacheable."
                },
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                },
                "Metadata":{
                    "shape":"Metadata",
                    "location":"headers",
                    "documentation":"A map of metadata to store with the object in S3.",
                    "locationName":"x-object-meta-"
                }
            },
            "payload":"Body"
        },
        "Range":{"type":"string"},
        "ReplicateObjectOutput":{
            "type":"structure",
            "members":{
                "ETag":{
                    "shape":"ETag",
                    "location":"header",
                    "locationName":"ETag",
                    "documentation":"Entity tag for the uploaded object."
                }
            }
        },
        "ReplicateObjectRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                },
                "CopySource":{
                    "shape":"CopySource",
                    "location":"header",
                    "locationName":"X-Copy-From"
                }
            }
        },
        "Subdir":{
            "type":"structure",
            "members":{
                "name":{"shape":"ObjectKey"}
            }
        },
        "SubdirList":{
            "type":"list",
            "member":{"shape":"Subdir"},
            "flattened":true
        },
        "Size":{"type":"integer"},
        "Suffix":{"type":"string"},
        "Tag":{
            "type":"structure",
            "required":[
                        "Key",
                        "Value"
                        ],
            "members":{
                "Key":{
                    "shape":"ObjectKey",
                    "documentation":"Name of the tag."
                },
                "Value":{
                    "shape":"Value",
                    "documentation":"Value of the tag."
                }
            }
        },
        "Type":{
            "type":"string",
            "enum":[
                    "CanonicalUser",
                    "AmazonCustomerByEmail",
                    "Group"
                    ],
            "xmlAttribute":true,
            "locationName":"xsi:type"
        },
        "URI":{"type":"string"},
        "UploadIdMarker":{"type":"string"},
        "UploadPartOutput":{
            "type":"structure",
            "members":{
                "ServerSideEncryption":{
                    "shape":"ServerSideEncryption",
                    "location":"header",
                    "locationName":"x-amz-server-side-encryption",
                    "documentation":"The Server-side encryption algorithm used when storing this object in S3 (e.g., AES256, aws:kms)."
                },
                "ETag":{
                    "shape":"ETag",
                    "location":"header",
                    "locationName":"ETag",
                    "documentation":"Entity tag for the uploaded object."
                }
            }
        },
        "UploadPartRequest":{
            "type":"structure",
            "required":[
                        "Object"
                        ],
            "members":{
                "Body":{
                    "shape":"Body",
                    "streaming":true
                },
                "ContentLength":{
                    "shape":"ContentLength",
                    "location":"header",
                    "locationName":"Content-Length",
                    "documentation":"Size of the body in bytes. This parameter is useful when the size of the body cannot be determined automatically."
                },
                "ContentMD5":{
                    "shape":"ContentMD5",
                    "location":"header",
                    "locationName":"Content-MD5"
                },
                "Object":{
                    "shape":"ObjectKey",
                    "location":"uri",
                    "locationName":"Object"
                }
            },
            "payload":"Body"
        },
        "Value":{"type":"string"},
        "VersionIdMarker":{"type":"string"}
    }
}